/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package programa;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static org.apache.poi.ss.usermodel.CellType.BLANK;
import static org.apache.poi.ss.usermodel.CellType.BOOLEAN;
import static org.apache.poi.ss.usermodel.CellType.NUMERIC;
import static org.apache.poi.ss.usermodel.CellType.STRING;
/**
 *
 * @author USUARIO
 */
public class cargaM extends javax.swing.JPanel {

    /**
     * Creates new form cargaM
     */
    public cargaM() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel33 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        comboEscuela = new javax.swing.JComboBox<>();
        rutaLabel = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();

        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel33.setText("Carga Masiva");

        jButton4.setText("Escoger archivo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        comboEscuela.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escuela", "Computación", "Arquitectura", "Mecanica", "Civil","Electronica","Telecomunicaciones","Industrial" }));

        rutaLabel.setText("Ruta");

        jButton5.setText("Efectuar Carga Masiva");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Semestre","9vno", "10mo"}));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo", "Trabajo de grado", "Pasantia", "Diseño", "Sin asignar" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(jButton5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rutaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(comboEscuela, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(rutaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboEscuela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(41, 41, 41))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        int resultado = fileChooser.showOpenDialog(null);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = fileChooser.getSelectedFile();
            String rutaArchivo = archivoSeleccionado.getAbsolutePath();

            // Llamar a la función de análisis de Excel pasando la 'rutaArchivo'
            // Puedes reemplazar esto con tu lógica de análisis de Excel
            rutaLabel.setText(rutaArchivo);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String valorSeleccionado = (String) comboEscuela.getSelectedItem();
        String semestre = (String) jComboBox1.getSelectedItem();
        String tipo = (String) jComboBox2.getSelectedItem();
        if (valorSeleccionado == "Escuela" || rutaLabel.getText() == "Ruta" || semestre == "Semestre" || tipo == "Tipo") {
            JOptionPane.showMessageDialog(null, "Por favor llene los campos");
        } else {
            try {
                analizarArchivoExcel(rutaLabel.getText(), valorSeleccionado, semestre, tipo);
            } catch (SQLException ex) {
                Logger.getLogger(cargaM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed
private void analizarArchivoExcel(String rutaArchivo, String Escuela, String Semestre, String Tipo) throws SQLException {
    Alumnosside nose = new Alumnosside();
        try {
             // Verificar si la extensión del archivo es .xlsx (Excel)
        if (!rutaArchivo.toLowerCase().endsWith(".xlsx")) {
            // Mostrar un mensaje de error en caso de que no sea un archivo Excel
            JOptionPane.showMessageDialog(null, "El archivo seleccionado no es un archivo Excel (.xlsx)", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método
        }
            // Especifica la ubicación del archivo Excel
            FileInputStream archivoExcel = new FileInputStream(new File(rutaArchivo));

            // Crea un libro de trabajo de Excel
            Workbook workbook = new XSSFWorkbook(archivoExcel);

            // Obtiene la primera hoja del libro (puedes cambiar el índice si necesitas otra hoja)
            Sheet hoja = workbook.getSheetAt(0);
            ArrayList<String> datos = new ArrayList();
            // Itera a través de las filas y columnas para leer los datos
            for (Row fila : hoja) {
                for (Cell celda : fila) {
                    switch (celda.getCellType()) {
                        case STRING:
                            System.out.print(celda.getStringCellValue());
                            datos.add(celda.getStringCellValue());
                            break;
                        case NUMERIC:
                           if (celda.getNumericCellValue() % 1 == 0) {
                                // El valor es un número entero
                                int valorEntero = (int) celda.getNumericCellValue();
                                System.out.print(valorEntero + "\t");
                                datos.add(Integer.toString(valorEntero));
                           }
                            break;
                        case BOOLEAN:
                            System.out.print(celda.getBooleanCellValue() + "\t");
                            break;
                        case BLANK:
                            System.out.print("BLANK\t");
                            break;
                        default:
                            System.out.print("DEFAULT\t");
                    }
                }
                if(datos.size()>=2){
                conexion objConexion = new conexion();
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                Date creacion = new Date();
                String hoy = formato.format(creacion);
                String valor = datos.get(1);
                String[] valoresDivididos = valor.split(",");
                if (valoresDivididos.length >= 2) {

//                    String addSql = String.format("INSERT INTO estudiantes (Nombre, Apellido, Cedula, Facultad, Escuela, fecha_registro, Nivel) VALUES"
//                            + "('" + valoresDivididos[1].substring(1) + "','" + valoresDivididos[0] + "','" + datos.get(0) + "','" + "Ingeniería"
//                            + "','" + Escuela + "','" + hoy + "','" + Semestre + "') ");
//                    objConexion.ejecutarSentenciaSQl(addSql);
                    nose.codigoAlumno(valoresDivididos[1].substring(1), valoresDivididos[0], datos.get(0), Escuela, hoy, Semestre, Tipo, "Pareja"); // Cambia de línea después de cada fila

                    datos.clear();
                    objConexion.cerrarConexion();
                    
                    // Realiza las operaciones necesarias con estos valores
                } else {
                    // Maneja el caso en el que no hay suficientes valores separados por comas
                    // Puedes imprimir un mensaje de advertencia o realizar otra acción apropiada
                }

            }
            }
            // Cierra el archivo Excel
            archivoExcel.close();
            // Muestra un mensaje de éxito con JOptionPane
        
            JOptionPane.showMessageDialog(null, "Los datos se han procesado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        while (Alumnos.modeloa.getRowCount() > 0) {
            Alumnos.modeloa.removeRow(0);
        }
        try {
            conexion objConexion = new conexion();
            ResultSet resultado = objConexion.consultaRegistros("SELECT * FROM estudiantes");
            while (resultado.next()) {
                Object[] UsuarioD = {resultado.getString("Cedula"),resultado.getString("Nombre"), 
                    resultado.getString("Apellido"),resultado.getString("Facultad")
                    , resultado.getString("Escuela")};

                Alumnos.modeloa.addRow(UsuarioD);
                
//                objConexion.cerrarConexion();
            }
        } catch (SQLException e) {
          JOptionPane.showMessageDialog(null, "Error" + e);
        }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error de E/S: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboEscuela;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel rutaLabel;
    // End of variables declaration//GEN-END:variables
}
