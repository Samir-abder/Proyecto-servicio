/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package programa;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
/**
 *
 * @author USUARIO
 */
public class Tg extends javax.swing.JPanel {

    /**
     * Creates new form Tg
     */
    public Tg() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        est2 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        aTitulo = new javax.swing.JTextField();
        aSave = new javax.swing.JButton();
        aEdit = new javax.swing.JButton();
        aDelete = new javax.swing.JButton();
        est1 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        Tutorcombo = new javax.swing.JComboBox<>();

        jLabel7.setText("Anteproyecto ");

        jLabel8.setText("Estudiantes 2");

        est2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                est2ActionPerformed(evt);
            }
        });

        jLabel14.setText("Tutores");

        jLabel15.setText("Titulo");

        aTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aTituloActionPerformed(evt);
            }
        });

        aSave.setText("Save");
        aSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aSaveActionPerformed(evt);
            }
        });

        aEdit.setText("Edit");
        aEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aEditActionPerformed(evt);
            }
        });

        aDelete.setText("Delete");
        aDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aDeleteActionPerformed(evt);
            }
        });

        est1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                est1ActionPerformed(evt);
            }
        });

        jLabel30.setText("Estudiante 1");

        Tutorcombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Tutorcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TutorcomboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(45, 45, 45)
                            .addComponent(jLabel30)
                            .addGap(16, 16, 16)
                            .addComponent(est1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(120, 120, 120)
                            .addComponent(jLabel8)
                            .addGap(11, 11, 11)
                            .addComponent(est2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jLabel15))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(aTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(jLabel14)
                            .addGap(21, 21, 21)
                            .addComponent(Tutorcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(30, 30, 30)
                            .addComponent(aSave)
                            .addGap(18, 18, 18)
                            .addComponent(aEdit)
                            .addGap(18, 18, 18)
                            .addComponent(aDelete)))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 98, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jLabel7))
                        .addComponent(jLabel30)
                        .addComponent(est1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(4, 4, 4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel8)
                        .addComponent(est2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(12, 12, 12)
                    .addComponent(jLabel15)
                    .addGap(10, 10, 10)
                    .addComponent(aTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(20, 20, 20)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel14)
                        .addComponent(Tutorcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(aSave)
                        .addComponent(aEdit)
                        .addComponent(aDelete))
                    .addGap(0, 99, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void est2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_est2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_est2ActionPerformed

    private void aTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aTituloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aTituloActionPerformed

    private void aSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aSaveActionPerformed
        // TODO add your handling code here:
        String cedula1 = est1.getText();
        String cedula2 = est2.getText();
        conexion habana=new conexion();
        if (cedula2.isEmpty()) {
            String find = String.format("SELECT COUNT(*) FROM estudiantes Where Cedula = '" + cedula1 + "'");
            ResultSet rs = habana.consultaRegistros(find);

            try {
                if (rs.next()) {
                    int cantidad = rs.getInt(1);
                    if (cantidad > 0) {

                        String consultaPasantia = "SELECT id_pasantia FROM estudiantes WHERE Cedula = '" + cedula1 + "'";
                        ResultSet rsPasantia = habana.consultaRegistros(consultaPasantia);
                        int idPasantia = rsPasantia.getInt("id_pasantia");

                        if (idPasantia != 0) {

                            // Aquí tienes el valor de id_pasantia para el estudiante con la cédula especificada
                            JOptionPane.showMessageDialog(null, "El estudiante " + cedula1 + " ya tiene una pasantia asignada.", "Error", JOptionPane.ERROR_MESSAGE);
                        } else {
                            String consultatrabajo = "SELECT id_trabajo FROM estudiantes WHERE Cedula = '" + cedula1 + "'";
                            ResultSet rstrabajo = habana.consultaRegistros(consultatrabajo);
                            int idtrabajo = rstrabajo.getInt("id_trabajo");

                            if (idtrabajo != 0) {

                                JOptionPane.showMessageDialog(null, "El estudiante " + cedula1 + " ya tiene un trabajo de grado asignado.", "Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                String addSql = String.format("INSERT INTO trabajo_grado (titulo, cedula_estudiante, tutor, periodo) VALUES ('%s', '%s', '%s', '%s')",
                                    aTitulo.getText(), cedula1, Tutorcombo.getSelectedItem(), "Periodo");

                                habana.ejecutarSentenciaSQl(addSql);

                                // Obtener el último valor autoincremental de la tabla
                                String getLastIdSql = "SELECT last_insert_rowid()";
                                ResultSet lastIdResultSet = habana.consultaRegistros(getLastIdSql);

                                if (lastIdResultSet.next()) {
                                    int idGenerado = lastIdResultSet.getInt(1);
                                    // Actualizar la tabla estudiantes con el ID generado
                                    String updateEstudiantesSql = String.format("UPDATE estudiantes SET id_trabajo = %d WHERE Cedula = '%s'", idGenerado, cedula1);
                                    habana.ejecutarSentenciaSQl(updateEstudiantesSql);
                                    habana.cerrarConexion();
                                }
                                codigo(est1.getText());
                            }
                        }

                    }
                }
            } catch (SQLException e) {
                // Manejar excepciones de SQL
                e.printStackTrace();
            }

        } else {
            habana.cerrarConexion();
            if (ambosEstudiantesExisten(cedula1, cedula2)) {
                if (ningunEstudianteTieneTrabajoDeGrado(cedula1, cedula2)) {
                    if (ningunEstudianteTienePasantia(cedula1, cedula2)) {
                        // Ambos estudiantes existen, ninguno tiene trabajos de grado asignados y ninguno tiene pasantías asignadas
                        // Puedes continuar con la inserción del trabajo de grado.
                        System.out.println("antes");
                        conexion objconexion=new conexion();
                        System.out.println("despues");

                        try {
                            String addSql = String.format("INSERT INTO trabajo_grado (titulo, cedula_estudiante, cedula_estudiante2, tutor, periodo) VALUES ('%s', '%s', '%s','%s','%s')",
                                aTitulo.getText(), cedula1, cedula2, Tutorcombo.getSelectedItem(), "Periodo");

                            objconexion.ejecutarSentenciaSQl(addSql);

                            // Obtener el último valor autoincremental de la tabla
                            String getLastIdSql = "SELECT last_insert_rowid()";
                            ResultSet lastIdResultSet = objconexion.consultaRegistros(getLastIdSql);

                            if (lastIdResultSet.next()) {
                                int idGenerado = lastIdResultSet.getInt(1);
                                // Actualizar la tabla estudiantes con el ID generado
                                String updateEstudiantesSql = String.format("UPDATE estudiantes SET id_trabajo = %d WHERE Cedula = '%s'", idGenerado, cedula1);
                                objconexion.ejecutarSentenciaSQl(updateEstudiantesSql);
                                String updateEstudiantesSql1 = String.format("UPDATE estudiantes SET id_trabajo = %d WHERE Cedula = '%s'", idGenerado, cedula2);
                                objconexion.ejecutarSentenciaSQl(updateEstudiantesSql1);
                                objconexion.cerrarConexion();
                            }
                            codigo(est1.getText());
                            codigo(est2.getText());
                        } catch (SQLException ex) {
                            
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Uno de los estudiantes ya tiene una pasantía asignada.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Uno de los estudiantes ya tiene un trabajo de grado asignado.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Uno de los estudiantes no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }

        //find.ejecutarSentenciaSQl(addSql);
    }//GEN-LAST:event_aSaveActionPerformed

    private void est1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_est1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_est1ActionPerformed

    private void aEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aEditActionPerformed
        // TODO add your handling code here:
          String cedula1 = est1.getText();
        String cedula2 = est2.getText();
        conexion habana=new conexion();
        if (cedula2.isEmpty()) {
            String updateSql = String.format("UPDATE trabajo_grado SET titulo = '%s', cedula_estudiante = '%s', cedula_estudiante2 = '%s', tutor = '%s', periodo = '%s' WHERE cedula_estudiante = '%s'",
    aTitulo.getText(), cedula1, cedula2, Tutorcombo.getSelectedItem(), "Periodo", cedula1);

try {
    habana.ejecutarSentenciaSQl(updateSql);
    JOptionPane.showMessageDialog(null, "Registro de trabajo de grado actualizado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    habana.cerrarConexion();
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Error al actualizar el registro de trabajo de grado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

        } else {
         String updateSql = String.format("UPDATE trabajo_grado SET titulo = '%s', tutor = '%s', periodo = '%s' WHERE (cedula_estudiante = '%s' AND cedula_estudiante2 = '%s') OR (cedula_estudiante = '%s' AND cedula_estudiante2 = '%s')",
    aTitulo.getText(), Tutorcombo.getSelectedItem(), "Periodo", cedula1, cedula2, cedula2, cedula1);

try {
    habana.ejecutarSentenciaSQl(updateSql);
    JOptionPane.showMessageDialog(null, "Registro de trabajo de grado actualizado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    habana.cerrarConexion();
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Error al actualizar el registro de trabajo de grado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}


        }
        habana.cerrarConexion();
    }//GEN-LAST:event_aEditActionPerformed

    private void aDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aDeleteActionPerformed
        // TODO add your handling code here:
        String cedula1 = est1.getText();
        String cedula2 = est2.getText();
        conexion habana=new conexion();
        if (cedula2.isEmpty()) {
            String deleteSql = String.format("DELETE FROM trabajo_grado WHERE cedula_estudiante = '%s'", cedula1);

try {
    habana.ejecutarSentenciaSQl(deleteSql);
    JOptionPane.showMessageDialog(null, "Registro eliminado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

    // Luego de la eliminación exitosa, actualiza la tabla Estudiantes para vaciar la columna id_pasantia
    String updateEstudiantesSql = String.format("UPDATE estudiantes SET id_trabajo = NULL WHERE Cedula = '%s'", cedula1);
    
    habana.ejecutarSentenciaSQl(updateEstudiantesSql);
    
    JOptionPane.showMessageDialog(null, "La columna id_trabajo en la tabla Estudiantes ha sido vaciada.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            habana.cerrarConexion();

} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Error al eliminar el registro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            habana.cerrarConexion();

}
        }else{
            String deleteSql = String.format("DELETE FROM trabajo_grado WHERE (cedula_estudiante = '%s' AND cedula_estudiante2 = '%s') OR (cedula_estudiante = '%s' AND cedula_estudiante2 = '%s')",
    cedula1, cedula2, cedula2, cedula1);

try {
    habana.ejecutarSentenciaSQl(deleteSql);
    JOptionPane.showMessageDialog(null, "Registro eliminado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

    // Luego de la eliminación exitosa, actualiza la tabla Estudiantes para vaciar la columna id_trabajo
    String updateEstudiantesSql = String.format("UPDATE estudiantes SET id_trabajo = NULL WHERE (Cedula = '%s' OR Cedula = '%s')", cedula1, cedula2);

    habana.ejecutarSentenciaSQl(updateEstudiantesSql);

    JOptionPane.showMessageDialog(null, "La columna id_trabajo en la tabla Estudiantes ha sido vaciada.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    
    habana.cerrarConexion();
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Error al eliminar el registro: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    
    habana.cerrarConexion();
}
habana.cerrarConexion();
        }
    }//GEN-LAST:event_aDeleteActionPerformed

    private void TutorcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TutorcomboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TutorcomboActionPerformed
  private boolean ambosEstudiantesExisten(String cedula1, String cedula2) {
        conexion habana=new conexion();
        String consultaEstudiante1 = String.format("SELECT COUNT(*) FROM estudiantes WHERE Cedula = '%s'", cedula1);
        String consultaEstudiante2 = String.format("SELECT COUNT(*) FROM estudiantes WHERE Cedula = '%s'", cedula2);

        ResultSet rs1 = habana.consultaRegistros(consultaEstudiante1);
        ResultSet rs2 = habana.consultaRegistros(consultaEstudiante2);

        try {
            if (rs1.next() && rs2.next()) {
                int cantidadEstudiante1 = rs1.getInt(1);
                int cantidadEstudiante2 = rs2.getInt(1);
habana.cerrarConexion();
                return cantidadEstudiante1 > 0 && cantidadEstudiante2 > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

habana.cerrarConexion();
        return false; // Si hay un error, considera que no existen ambos estudiantes
    }

    private boolean ningunEstudianteTieneTrabajoDeGrado(String cedula1, String cedula2) {
        conexion habana=new conexion();
        String consultaTrabajo1 = String.format("SELECT id_trabajo FROM estudiantes WHERE Cedula = '%s'", cedula1);
        String consultaTrabajo2 = String.format("SELECT id_trabajo FROM estudiantes WHERE Cedula = '%s'", cedula2);

        ResultSet rs1 = habana.consultaRegistros(consultaTrabajo1);
        ResultSet rs2 = habana.consultaRegistros(consultaTrabajo2);

        try {
            if (rs1.next() && rs2.next()) {
                int idTrabajo1 = rs1.getInt("id_trabajo");
                int idTrabajo2 = rs2.getInt("id_trabajo");
habana.cerrarConexion();
                return idTrabajo1 == 0 && idTrabajo2 == 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
habana.cerrarConexion();
        return false; // Si hay un error, considera que ambos estudiantes tienen trabajos de grado asignados
    }

    private boolean ningunEstudianteTienePasantia(String cedula1, String cedula2) {
        conexion habana=new conexion();
        String consultaPasantia1 = String.format("SELECT id_pasantia FROM estudiantes WHERE Cedula = '%s'", cedula1);
        String consultaPasantia2 = String.format("SELECT id_pasantia FROM estudiantes WHERE Cedula = '%s'", cedula2);

        ResultSet rs1 = habana.consultaRegistros(consultaPasantia1);
        ResultSet rs2 = habana.consultaRegistros(consultaPasantia2);

        try {
            if (rs1.next() && rs2.next()) {
                int idPasantia1 = rs1.getInt("id_pasantia");
                int idPasantia2 = rs2.getInt("id_pasantia");
habana.cerrarConexion();
                return idPasantia1 == 0 && idPasantia2 == 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
habana.cerrarConexion();
        return false; // Si hay un error, considera que ambos estudiantes tienen pasantías asignadas
    }
private void codigo(String tf) throws SQLException{
    conexion habana=new conexion();
    System.out.println("tf"+tf);
    String sql2 = "SELECT num_est, periodo, Escuela FROM estudiantes WHERE Cedula = '" + tf + "'";
                
                                    ResultSet rsC = habana.consultaRegistros(sql2);

                // Obtener los valores de las columnas y guardarlos en variables
                String num_est = rsC.getString("num_est");
                String periodoC = rsC.getString("periodo");
                String escuela = rsC.getString("Escuela");

                switch (escuela) {
                    case "Computación":

                        escuela = "C";
                        break;
                    case "Industrial":
                        escuela = "I";
                        break;
                    case "Civil":
                        escuela = "L";
                        break;
                    case "Electrónica":
                        escuela = "Et";
                        break;
                    case "Telecomunicaciones":
                        escuela = "T";
                        break;
                    case "Mecánica":
                        escuela = "N";
                        break;
                    case "Arquitectura":
                        escuela = "Q";
                        break;
                    default:
                    // código que se ejecuta si no se cumple ninguna de las opciones anteriores
                }

                String cod = "FI-" + escuela + "-" + num_est + "-" + periodoC + "-" + "TG";

                String sql3 = String.format("UPDATE estudiantes SET codigo = '%s', tipo = 'Trabajo de grado' WHERE Cedula = '%s'", cod, tf);

                habana.ejecutarSentenciaSQl(sql3);
                habana.cerrarConexion();
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Tutorcombo;
    private javax.swing.JButton aDelete;
    private javax.swing.JButton aEdit;
    private javax.swing.JButton aSave;
    private javax.swing.JTextField aTitulo;
    private javax.swing.JTextField est1;
    private javax.swing.JTextField est2;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    // End of variables declaration//GEN-END:variables
}
